# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  aws_auth_acc: 
    type: string
    default: $aws_auth_acc
  aws_auth_sec: 
    type: string
    default: $aws_auth_sec


jobs:
  create_vm:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: "create auth file"
          command: |
            cat > terraform/terraform-aws-ec2-nginx-main/terraform.tfvars \<< EOL
            aws_access_key = "<< pipeline.parameters.aws_auth_acc >>"
            aws_secret_key = "<< pipeline.parameters.aws_auth_sec >>"
            access_ip      = "0.0.0.0/0"
            EOL
      - run:
          name: "see auth file"
          command: |
            apk update
            apk add jq
            cat terraform/terraform-aws-ec2-nginx-main/terraform.tfvars
            cd terraform/terraform-aws-ec2-nginx-main/
            terraform init
            terraform plan
            terraform apply -auto-approve
            terraform show -json | jq '.values.outputs.ec2_public_ip.value' > ip.txt
      - persist_to_workspace:
          root: terraform/terraform-aws-ec2-nginx-main
          paths:
            - key.pem
            - ip.txt
      - store_artifacts:
          path: terraform/terraform-aws-ec2-nginx-main/key.pem
      - store_artifacts:
          path: terraform/terraform-aws-ec2-nginx-main/ip.txt

  
  configure_minikube:
    docker: 
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: "test"
          command: |
            sleep 240
            cd ./
            cat key.pem
            chmod 400 key.pem
            ip=$(sed 's/.//;s/.$//' ip.txt)
            ssh  -o BatchMode=yes -o StrictHostKeyChecking=no -i key.pem ubuntu@$ip \
            'sudo minikube start --vm-driver=none; sleep 120; sudo kubectl apply -f https://docs.projectcalico.org/manifests/calico-typha.yaml'
  
  deploy_istio:
    docker: 
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: "deploy_app"
          command: |
            sleep 120
            mv expose_app.sh ./
            cd ./
            cat key.pem
            chmod 400 key.pem
            ip=$(sed 's/.//;s/.$//' ip.txt)
            cat expose_app.sh | ssh  -o BatchMode=yes -o StrictHostKeyChecking=no -i key.pem ubuntu@$ip /bin/bash
  
  scenario1:
    docker: 
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: "deploy_app"
          command: |
            sleep 30
            mv scenario1.sh ./
            cd ./
            cat key.pem
            chmod 400 key.pem
            ip=$(sed 's/.//;s/.$//' ip.txt)
            cat scenario1.sh | ssh  -o BatchMode=yes -o StrictHostKeyChecking=no -i key.pem ubuntu@$ip /bin/bash

  cleanup:
    docker: 
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: "deploy_app"
          command: |
            sleep 30
            mv cleanup.sh ./
            cd ./
            cat key.pem
            chmod 400 key.pem
            ip=$(sed 's/.//;s/.$//' ip.txt)
            cat cleanup.sh | ssh  -o BatchMode=yes -o StrictHostKeyChecking=no -i key.pem ubuntu@$ip /bin/bash


workflows:
  deploy_demo:
    jobs:
      - create_vm
      - configure_minikube:
          requires:
            - create_vm
      - deploy_istio:
          requires:
            - configure_minikube
  Injecting_an_HTTP_abort_fault:
    jobs:
      - scenario1
  cleanup:
    jobs:
      - cleanup
      
            
